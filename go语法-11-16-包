包
是一个函数和数据的集合，用package关键字定义一个包，文件名不需要与包的名字一致，包名约定使用小字符，让我们来定义一个自己的包吧
package even ← 开始自定义的包
func Even(i int ) bool { ← 可导出函数
return i % 2 == 0
}
func odd(i int ) bool { ← 私有函数
return i % 2 == 1
}
名字是以大写字母开头的函数是可以导出的，可以在外部调用。

% mkdir $GOPATH/src/even
% cp even.go $GOPATH/src/even
% go build
% go install

包的文档
每个包都应该有一个包的注释，在package前的一个注释（可以区别于python 的类中三个''' ''' 来增加对类的一个说明）
/*
The regexp package implements a simple library for
regular expressions.
The syntax of the regular expressions accepted is:
regexp:
concatenation '|' concatenation
*/
package regexp

测试包
package even
import "testing"
func TestEven(t *testing.T) { //测试包函数名称
if ! Even(2) {
    t.Log("2 should be even ! ") Log 用默认格式对其参数进行格式化，与 Print() 类似，并且记录文本到错误日志
    t.Fail()  Fail 标记测试函数失败，但仍然继续执行
}
 }
常用包
fmt
包 fmt 实现了格式化的 I/O 函数，这与 C 的 printf 和 scanf 类似。格式化短语
派生于 C 。一些短语（%-序列）这样使用：
%v
默认格式的值。当打印结构时，加号（%+v）会增加字段名；
%#v
Go 样式的值表达；
%T
带有类型的 Go 样式的值表达；
io
这个包提供了原始的 I/O 操作界面。它主要的任务是对 os 包这样的原始的 I/O 进
行封装，增加一些其他相关，使其具有抽象功能用在公共的接口上。
bufio
这个包实现了缓冲的 I/O。它封装于 io.Reader 和 io.Writer 对象，创建了另
一个对象（Reader 和 Writer）在提供缓冲的同时实现了一些文本 I/O 的功能。
sort
sort 包提供了对数组和用户定义集合的原始的排序功能。
strconv
strconv 包提供了将字符串转换成基本数据类型，或者从基本数据类型转换为字
符串的功能。
os
os 包提供了与平台无关的操作系统功能接口。其设计是 Unix 形式的。
sync
sync 包提供了基本的同步原语，例如互斥锁。
flag
flag 包实现了命令行解析。 参阅 “ 命令行参数 ” 在第 92 页。
encoding/json
encoding/json 包实现了编码与解码 RFC 4627 [2] 定义的 JSON 对象。
html/template
数据驱动的模板，用于生成文本输出，例如 HTML。
将模板关联到某个数据结构上进行解析。模板内容指向数据结构的元素（通常结
构的字段或者 map 的键）控制解析并且决定某个值会被显示。模板扫描结构以
便解析，而 “游标” @ 决定了当前位置在结构中的值。
net/http
net/http 实现了 HTTP 请求、响应和 URL 的解析，并且提供了可扩展的 HTTP 服
务和基本的 HTTP 客户端。
unsafe
unsafe 包包含了 Go 程序中数据类型上所有不安全的操作。 通常无须使用这个。
50 Chapter 3: 包
reflect
reflect 包实现了运行时反射，允许程序通过抽象类型操作对象。通常用于处理静
态类型 interface{} 的值，并且通过 Typeof 解析出其动态类型信息，通常会返回
一个有接口类型 Type 的对象。
参阅 5 ，第 “ 自省和反射 ” 节 。
os/exec
os/exec 包执行外部命令
